parameters:
  keycloak:
    =_metadata:
      multi_instance: true
      multi_tenant: true
      multi_version: true
    # make lookup table constant to prevent changes to it through the hierarchy
    =_enable_pg_chart:
      # This lookup table controls whether to enable the chart depending on the value of `keycloak.database.provider`
      builtin: true
      external: false
    =_hostname_strict:
      # This lookup table controls whether to enable KC_HOSTNAME_STRICT depending on the value of `keycloak.ingress.tls.termination`
      passthrough: 'true'
      reencrypt: 'false'
    =_ingress_annotations:
      # This lookup table controls whether to set specific annotations depending on the value of `keycloak.ingress.controller`,
      # `keycloak.ingress.tls.termination` and `keycloak.ingress.tls.provider`
      nginx:
        passthrough:
          _passthrough: &passthrough
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            route.openshift.io/termination: "passthrough"
          certmanager: *passthrough
          vault: *passthrough
        reencrypt:
          _reencrypt: &reencrypt
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            route.openshift.io/termination: "reencrypt"
          certmanager:
            <<: *reencrypt
            cert-manager.io/cluster-issuer: ${keycloak:ingress:tls:certmanager:issuer}
          vault: *reencrypt

    =_service_annotations:
      # lookup table for service annotations based on `keycloak.tls.provider`:
      certmanager: {}
      openshift:
        service.beta.openshift.io/serving-cert-secret-name: ${keycloak:tls:secretName}
      vault: {}

    namespace: syn-${_instance}
    name: keycloak
    images:
      keycloak:
        registry: quay.io
        repository: keycloak/keycloak
        tag: 25.0.6
      busybox:
        registry: docker.io
        repository: busybox
        tag: 1.32
      postgresql:
        registry: docker.io
        repository: bitnami/postgresql
        tag: 15.10.0-debian-12-r2
      bitnamishell:
        registry: docker.io
        repository: bitnami/os-shell
        tag: 12-debian-12-r43
    charts:
      keycloakx:
        source: https://codecentric.github.io/helm-charts
        version: 6.0.0
      postgresql:
        source: https://charts.bitnami.com/bitnami
        version: 12.12.10
    # FQDN should be overwritten on the cluster level
    fqdn: keycloak.example.com
    # Default path since Quarkus is "/" rather than "/auth"
    # https://www.keycloak.org/migration/migrating-to-quarkus
    relativePath: /
    # Disables dynamically resolving the hostname from request headers.
    hostnameStrict: ${keycloak:_hostname_strict:${keycloak:ingress:tls:termination}}
    # Namespace labels
    namespaceLabels: {}
    # Keycloak Admin
    admin:
      secretname: keycloak-admin-user
      username: admin
      password: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/admin-password}"
    # Replica count
    replicas: 2

    # Internal TLS configuration
    # For the ingress TLS config see `ingress.tls`
    tls:
      provider: certmanager
      secretName: keycloak-tls
      vault:
        cert: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/keycloak-cert}"
        certKey: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/keycloak-cert-key}"
      certmanager:
        apiVersion: cert-manager.io/v1
        certName: ${keycloak:tls:secretName}
        issuer:
          name: letsencrypt-production
          kind: ClusterIssuer
          group: cert-manager.io

    # Ingress or Route should be enabled on the distribution level
    ingress:
      enabled: true
      controller: nginx
      controllerNamespace: ingress-nginx
      annotations: ${keycloak:_ingress_annotations:${keycloak:ingress:controller}:${keycloak:ingress:tls:termination}:${keycloak:ingress:tls:provider}}
      tls:
        termination: reencrypt
        provider: certmanager
        secretName: ingress-tls
        certmanager:
          issuer: letsencrypt-production
        vault:
          cert: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/ingress-cert}"
          certKey: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/ingress-cert-key}"

    route:
      enabled: false

    # Labels can be extended in the config hierarchy by providing further
    # entries in key `labels`.
    labels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: ${_instance}
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/managed-by: commodore

    # Pod resource requests and limits
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1"
    # Extra java opts are appended to the default options set in
    # `class/keycloak.yml`.
    extraJavaOpts: ""
    # Extra enviroment variable that are appended to the helm variable `extraEnv`
    extraEnv: {}
    # Extra volumes that are appended to the helm variable `extraVolumes`
    extraVolumes: {}
    # Extra volume mounts that are appended to the helm variable `extraVolumeMounts`
    extraVolumeMounts: {}
    # Extra init containers that are appended to the helm variable `extraInitContainers`
    extraInitContainers: {}

    # Enable ServiceMonitor, PrometheusRule, and all Keycloak statistics on
    # the metrics endpoint by default.
    monitoring:
      enabled: true
      rules: []
    # Use Bitnami Postgres installed by the Keycloak chart by default
    database:
      provider: builtin

      secretname: keycloak-postgresql
      password: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/db-password}"
      database: keycloak
      username: keycloak
      jdbcParams: sslmode=verify-ca&sslrootcert=/opt/keycloak/db-certs/tls.crt

      tls:
        enabled: true
        verification: selfsigned
        certSecretName: keycloak-postgresql-tls
        serverCert: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/server-cert}"
        serverCertKey: "?{vaultkv:${cluster:tenant}/${cluster:name}/${_instance}/server-cert-key}"

      # Used when `provider=external`
      external:
        vendor: postgres
        host: keycloak-postgresql  # Default for database provider builtin. If external use the FQDN postgres.example.com.
        port: 5432

    k8up:
      enabled: false
      keepjobs: 3
      repo:
        secretName: k8up-repo
        password: "?{vaultkv:${cluster:tenant}/${cluster:name}/keycloak/k8up-repo-password}"
      s3:
        secretName: k8up-s3-credentials
        bucket: k8up-${cluster:name}-syn-keycloak
        accessKey: "?{vaultkv:${cluster:tenant}/${cluster:name}/keycloak/k8up-s3-accesskey}"
        secretKey: "?{vaultkv:${cluster:tenant}/${cluster:name}/keycloak/k8up-s3-secretkey}"

    helm_values:
      image:
        repository: ${keycloak:images:keycloak:registry}/${keycloak:images:keycloak:repository}
        tag: ${keycloak:images:keycloak:tag}
      http:
        relativePath: ${keycloak:relativePath}
        # Required because the Keycloak management port is HTTPS by default but the keycloakx helm chart has a default to HTTP
        internalScheme: HTTPS
      replicas: ${keycloak:replicas}
      statefulsetLabels: ${keycloak:labels}
      resources: ${keycloak:resources}

      # See https://www.keycloak.org/server/configuration
      # See https://www.keycloak.org/server/all-config
      args:
        - start

      # extraEnv *MUST* be a string, as it's fed through a templating
      # function.
      extraEnv: |
        - name: JAVA_OPTS
          value: >-
                    -XX:MaxRAMPercentage=50.0
                    -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless
                    ${keycloak:extraJavaOpts}
        - name: KC_HOSTNAME
          value: ${keycloak:fqdn}
        - name: KC_HOSTNAME_STRICT
          value: '${keycloak:hostnameStrict}'
        - name: KC_HTTPS_CERTIFICATE_FILE
          value: /etc/x509/https/tls.crt
        - name: KC_HTTPS_CERTIFICATE_KEY_FILE
          value: /etc/x509/https/tls.key
      extraEnvFrom: |
        - secretRef:
            name: ${keycloak:admin:secretname}
        - secretRef:
            name: ${keycloak:database:secretname}
      extraVolumes: |
        - name: db-certs
          secret:
            secretName: ${keycloak:database:tls:certSecretName}
            defaultMode: 0400
            items:
              - key: tls.crt
                path: tls.crt
        - name: keycloak-tls
          secret:
            secretName: ${keycloak:tls:secretName}
            defaultMode: 420
      extraVolumeMounts: |
        - name: db-certs
          readOnly: true
          mountPath: /opt/keycloak/db-certs
        - name: keycloak-tls
          readOnly: true
          mountPath: /etc/x509/https
      serviceAccount:
        labels: ${keycloak:labels}
      ingress:
        enabled: ${keycloak:ingress:enabled}
        annotations: ${keycloak:ingress:annotations}
        labels: ${keycloak:labels}
        servicePort: https
        rules:
          - host: ${keycloak:fqdn}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - ${keycloak:fqdn}
            secretName: ${keycloak:ingress:tls:secretName}
      route:
        enabled: ${keycloak:route:enabled}
        labels: ${keycloak:labels}
        host: ${keycloak:fqdn}
      networkPolicy:
        # Note: Do not enable when using ingress controller with hostNetwork=true.
        enabled: true
        # Note: On Syn-managed OpenShift4 clusters there should be already NetworkPolicies that allow traffic from Ingress controller out-of-the-box.
        extraFrom:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: ingress-nginx
            namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: ${keycloak:ingress:controllerNamespace}
      service:
        annotations: ${keycloak:_service_annotations:${keycloak:tls:provider}}
        httpPort: 8080
        labels: ${keycloak:labels}
      serviceMonitor:
        enabled: ${keycloak:monitoring:enabled}
        labels: ${keycloak:labels}
      prometheusRule:
        enabled: ${keycloak:monitoring:enabled}
        labels: ${keycloak:labels}
        rules: ${keycloak:monitoring:rules}
      dbchecker:
        enabled: 'true'
        image:
          repository: ${keycloak:images:busybox:registry}/${keycloak:images:busybox:repository}
          tag: ${keycloak:images:busybox:tag}
      metrics:
        enabled: ${keycloak:monitoring:enabled}
      database:
        vendor: ${keycloak:database:external:vendor}
        hostname: ${keycloak:database:external:host}
        port: ${keycloak:database:external:port}
        database: ${keycloak:database:database}
        username: ${keycloak:database:username}

    postgresql_helm_values:
      enabled: ${keycloak:_enable_pg_chart:${keycloak:database:provider}}
      auth:
        database: ${keycloak:database:database}
        username: ${keycloak:database:username}
        existingSecret: ${keycloak:database:secretname}
      primary:
        podAnnotations:
          k8up.io/backupcommand: sh -c 'PGDATABASE="$POSTGRES_DATABASE" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dump --clean'
          k8up.io/file-extension: .sql
        labels: ${keycloak:labels}
        containerSecurityContext:
          # runAsGroup: Uses runtime default if unset for K8s and OpenShift must not have set it
          # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podsecuritycontext-v1-core
          runAsGroup: null
      volumePermissions:
        enabled: ${keycloak:database:tls:enabled}
        image:
          registry: ${keycloak:images:bitnamishell:registry}
          repository: ${keycloak:images:bitnamishell:repository}
          tag: ${keycloak:images:bitnamishell:tag}
      tls:
        enabled: ${keycloak:database:tls:enabled}
        certificatesSecret: ${keycloak:database:tls:certSecretName}
        certFilename: tls.crt
        certKeyFilename: tls.key
      networkPolicy:
        enabled: true
        ingressRules:
          primaryAccessOnlyFrom:
            enabled: true
            podSelector:
              app.kubernetes.io/instance: keycloakx
              app.kubernetes.io/name: keycloakx
      image:
        registry: ${keycloak:images:postgresql:registry}
        repository: ${keycloak:images:postgresql:repository}
        tag: ${keycloak:images:postgresql:tag}
