parameters:
  keycloak:
    multi_instance: true
    # make lookup table constant to prevent changes to it through the hierarchy
    =_enable_pg_chart:
      # This lookup table controls whether to enable the chart depending on the value of `keycloak.database.provider`
      builtin: true
      external: false
    =_ingress_annotations:
      # This lookup table controls whether to set specific annotations depending on the value of `keycloak.ingress.controller`,
      # `keycloak.tls.termination` and `keycloak.tls.provider`
      nginx:
        passthrough:
          certmanager:
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          vault:
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        reencrypt:
          certmanager:
            kubernetes.io/tls-acme: 'true'
            cert-manager.io/cluster-issuer: ${keycloak:tls:certmanager:issuer:name}
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          vault:
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    =_enable_k8up_postgres_annotations:
      # This lookup table controls whether to configure the k8up annotations depending on the value of `keycloak.k8up.enabled`
      _True:
        k8up.syn.tools/backupcommand: sh -c 'PGDATABASE="$POSTGRES_DB" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dump'
      _False: {}

    namespace: syn-${_instance}
    release_name: keycloak
    charts:
      keycloak: '10.3.1'
    # FQDN should be overwritten on the cluster level
    fqdn: keycloak.example.com
    # Keycloak Admin
    admin:
      secretname: keycloak-admin-user
      username: admin
      password: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/admin-password}'
    # Replica count
    replicas: 2
    # TLS configuration
    tls:
      provider: certmanager
      termination: reencrypt
      secretName: keycloak-tls
      vault:
        cert: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/keycloak-cert}'
        certKey: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/keycloak-cert-key}'
      certmanager:
        apiVersion: cert-manager.io/v1alpha2
        certName: ${keycloak:tls:secretName}
        issuer:
          name: letsencrypt-production
          kind: ClusterIssuer
          group: cert-manager.io
    # Ingress or Route should be enabled on the distribution level
    ingress:
      enabled: true
      controller: nginx
      controllerNamespace: ingress-nginx
      annotations: ${keycloak:_ingress_annotations:${keycloak:ingress:controller}:${keycloak:tls:termination}:${keycloak:tls:provider}}
      tls:
        secretName: ingress-tls
        vault:
          cert: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/ingress-cert}'
          certKey: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/ingress-cert-key}'
    route:
      enabled: false
    # Labels can be extended in the config hierarchy by providing further
    # entries in key `labels`.
    labels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: ${_instance}
      app.kubernetes.io/version: v11.0.0
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/managed-by: commodore
    # Pod resource requests and limits
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1"
    # Extra java opts are appended to the default options set in
    # `class/keycloak.yml`.
    extraJavaOpts: ""
    # Enable ServiceMonitor, PrometheusRule, and all Keycloak statistics on
    # the metrics endpoint by default.
    monitoring:
      enabled: true
      statistics: all
      rules: []
    # Use Bitnami Postgres installed by the Keycloak chart by default
    database:
      provider: builtin

      secretname: keycloak-postgresql
      password: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/db-password}'
      database: keycloak
      username: keycloak
      jdbcParams: sslmode=verify-ca&sslrootcert=/opt/jboss/certs/tls.crt

      tls:
        enabled: true
        verification: selfsigned
        certSecretName: keycloak-postgresql-tls
        serverCert: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/server-cert}'
        serverCertKey: '?{vaultkv:${customer:name}/${cluster:name}/${_instance}/server-cert-key}'

      # Used when `provider=external`
      external:
        vendor: postgres
        host: postgres.example.com
        port: 5432

    k8up:
      enabled: false
      keepjobs: 3
      repo:
        secretName: k8up-repo
        password: '?{vaultkv:${customer:name}/${cluster:name}/keycloak/k8up-repo-password}'
      s3:
        secretName: k8up-s3-credentials
        bucket: k8up-${cluster:name}-syn-keycloak
        accessKey: '?{vaultkv:${customer:name}/${cluster:name}/keycloak/k8up-s3-accesskey}'
        secretKey: '?{vaultkv:${customer:name}/${cluster:name}/keycloak/k8up-s3-secretkey}'

    helm_values:
      image:
        repository: quay.io/keycloak/keycloak
      replicas: ${keycloak:replicas}
      statefulsetLabels: ${keycloak:labels}
      resources: ${keycloak:resources}
      # extraEnv *MUST* be a string, as it's fed through a templating
      # function.
      extraEnv: |
        - name: JAVA_OPTS
          value: >-
                    -XX:+UseContainerSupport
                    -XX:MaxRAMPercentage=50.0
                    -Djava.net.preferIPv4Stack=true
                    -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS
                    -Djava.awt.headless=true
                    ${keycloak:extraJavaOpts}
        - name: KEYCLOAK_STATISTICS
          value: ${keycloak:monitoring:statistics}
        - name: JGROUPS_DISCOVERY_PROTOCOL
          value: dns.DNS_PING
        - name: JGROUPS_DISCOVERY_PROPERTIES
          value: 'dns_query={{ include "keycloak.serviceDnsName" . }}'
        - name: CACHE_OWNERS_COUNT
          value: "${keycloak:helm_values:replicas}"
        - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
          value: "${keycloak:helm_values:replicas}"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
      extraEnvFrom: |
        - secretRef:
            name: ${keycloak:admin:secretname}
        - secretRef:
            name: ${keycloak:database:secretname}
      extraVolumes: |
        - name: db-certs
          secret:
            secretName: ${keycloak:database:tls:certSecretName}
            defaultMode: 0400
            items:
              - key: tls.crt
                path: tls.crt
        - name: keycloak-tls
          secret:
            secretName: ${keycloak:tls:secretName}
            defaultMode: 420
      extraVolumeMounts: |
        - name: db-certs
          readOnly: true
          mountPath: /opt/jboss/certs
        - name: keycloak-tls
          readOnly: true
          mountPath: /etc/x509/https

      serviceAccount:
        labels: ${keycloak:labels}
      ingress:
        enabled: ${keycloak:ingress:enabled}
        annotations: ${keycloak:ingress:annotations}
        labels: ${keycloak:labels}
        servicePort: https
        rules:
          - host: ${keycloak:fqdn}
            paths: ["/"]
        tls:
          - hosts:
              - ${keycloak:fqdn}
            secretName: ${keycloak:ingress:tls:secretName}
      route:
        enabled: ${keycloak:route:enabled}
        labels: ${keycloak:labels}
        host: ${keycloak:fqdn}
      networkPolicy:
        # Note: Do not enable when using ingress controller with hostNetwork=true.
        enabled: false
        # Note: On Syn-managed OpenShift4 clusters there should be already NetworkPolicies that allow traffic from Ingress controller out-of-the-box.
        extraFrom:
          - podSelector:
              matchLabels:
                app: ingress-nginx
            namespaceSelector:
              matchLabels:
                name: ${keycloak:ingress:controllerNamespace}
      service:
        # Workaround until https://github.com/codecentric/helm-charts/pull/432 is solved
        httpPort: 8080
        labels: ${keycloak:labels}
      serviceMonitor:
        enabled: ${keycloak:monitoring:enabled}
        labels: ${keycloak:labels}
      prometheusRule:
        enabled: ${keycloak:monitoring:enabled}
        labels: ${keycloak:labels}
        rules: ${keycloak:monitoring:rules}
      postgresql:
        enabled: ${keycloak:_enable_pg_chart:${keycloak:database:provider}}
        existingSecret: ${keycloak:database:secretname}
        image:
          registry: quay.io
        # master renamed to primary later https://github.com/bitnami/charts/commit/7eabc85fd4fae43127228a22829c7ce3fe85c389
        master:
          annotations: ${keycloak:_enable_k8up_postgres_annotations:_${keycloak:k8up:enabled}}
          labels: ${keycloak:labels}
        volumePermissions:
          enabled: ${keycloak:database:tls:enabled}
        tls:
          enabled: ${keycloak:database:tls:enabled}
          certificatesSecret: ${keycloak:database:tls:certSecretName}
          certFilename: tls.crt
          certKeyFilename: tls.key
        networkPolicy:
          enabled: true
